/**
 * lbettels
 *
 * Copyright (C) 2020 lbettels
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package foo.bar;

import java.sql.*;

public class StatementWrapper extends AbstractWrapper implements Statement {
    private static final String LINE_SEPARATOR = System.getProperty("line.separator");
    private final Statement delegate;

    public static Statement wrap(Statement delegate) {
    //put your code here//
        if (delegate == null) {
            return null;
        }
        return new StatementWrapper(delegate);
    }

    protected StatementWrapper(Statement delegate) {
        //put your code here//
        super(delegate);
        this.delegate = delegate;
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        //put your code here//
        return delegate.getResultSet();
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        //put your code here//
        return delegate.executeQuery(sql);
    }

    @Override
    public int[] executeBatch() throws SQLException {
        //put your code here//
        return delegate.executeBatch();
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        //put your code here//
        return delegate.execute(sql);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        //put your code here//
        return delegate.execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        //put your code here//
        return delegate.execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        //put your code here//
        return delegate.execute(sql, columnNames);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        //put your code here//
        return delegate.executeUpdate(sql);
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        //put your code here//
        return delegate.executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        //put your code here//
        return delegate.executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        //put your code here//
        return delegate.executeUpdate(sql, columnNames);
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        //put your code here//
        delegate.addBatch(sql);
    }

    @Override
    public void close() throws SQLException {
        //put your code here//
        delegate.close();
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        //put your code here//
        return delegate.getMaxFieldSize();
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        //put your code here//
        delegate.setMaxFieldSize(max);
    }

    @Override
    public int getMaxRows() throws SQLException {
        //put your code here//
        return delegate.getMaxRows();
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        //put your code here//
        delegate.setMaxRows(max);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        //put your code here//
        delegate.setEscapeProcessing(enable);
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        //put your code here//
        return delegate.getQueryTimeout();
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        //put your code here//
        delegate.setQueryTimeout(seconds);
    }

    @Override
    public void cancel() throws SQLException {
        //put your code here//
        delegate.cancel();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        //put your code here//
        return delegate.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        //put your code here//
        delegate.clearWarnings();
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        //put your code here//
        delegate.setCursorName(name);
    }

    @Override
    public int getUpdateCount() throws SQLException {
        //put your code here//
        return delegate.getUpdateCount();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        //put your code here//
        return delegate.getMoreResults();
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        //put your code here//
        delegate.setFetchDirection(direction);
    }

    @Override
    public int getFetchDirection() throws SQLException {
        //put your code here//
        return delegate.getFetchDirection();
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        //put your code here//
        delegate.setFetchSize(rows);
    }

    @Override
    public int getFetchSize() throws SQLException {
        //put your code here//
        return delegate.getFetchSize();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        //put your code here//
        return delegate.getResultSetConcurrency();
    }

    @Override
    public int getResultSetType() throws SQLException {
        //put your code here//
        return delegate.getResultSetType();
    }

    @Override
    public void clearBatch() throws SQLException {
        //put your code here//
        delegate.clearBatch();
    }

    @Override
    public Connection getConnection() throws SQLException {
        //put your code here//
        return delegate.getConnection();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        //put your code here//
        return delegate.getMoreResults(current);
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        //put your code here//
        return delegate.getGeneratedKeys();
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        //put your code here//
        return delegate.getResultSetHoldability();
    }

    @Override
    public boolean isClosed() throws SQLException {
        //put your code here//
        return delegate.isClosed();
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        //put your code here//
        delegate.setPoolable(poolable);
    }

    @Override
    public boolean isPoolable() throws SQLException {
        //put your code here//
        return delegate.isPoolable();
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        //put your code here//
        delegate.closeOnCompletion();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        //put your code here//
        return delegate.isCloseOnCompletion();
    }
}
